{"version":3,"sources":["loading.svg","redux/constants.js","redux/quizReducer.js","components/QuizQuestion.js","components/LoadingButton.js","api.js","redux/quizActions.js","components/QuestionList.js","components/QuizReport.js","components/QuizBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VIEW","ACTION","INIT_STATE","currentView","quizId","quizTitle","questions","score","errorMsg","Question","index","question","selectAnswer","name","ansId","j","className","text","options","map","o","key","id","type","checked","answer","onChange","htmlFor","SPINNER","src","Animation","alt","LoadingButton","props","buttonProps","loading","undefined","children","ENDPOINT","require","backendEndpoint","fetchQuiz","a","axios","get","res","data","error","response","status","verifyQuiz","answers","post","errorMsgFor","code","connect","state","title","qIndex","aIndex","submitQuiz","dispatch","getState","q","report","isLoading","i","onClick","disabled","reset","loadQuiz","quiz","useState","setQuizId","onSubmit","event","preventDefault","placeholder","autoComplete","value","e","target","store","createStore","action","console","warn","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c2a4ab8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.7627bc82.svg\";","export const VIEW = {\n    INIT: \"INIT\",\n    LOADING: \"LOADING\",\n    STARTED: \"STARTED\",\n    SUBMITTING: 'SUBMITTING',\n    ENDED: 'ENDED',\n}\n\nexport const ACTION = {\n    LOAD_QUIZ: 'LOAD_QUIZ',\n    START_QUIZ: 'START_QUIZ',\n    START_QUIZ_FAIL: 'START_QUIZ_FAIL',\n    SELECT_ANSWER: 'SELECT_ANSWER',\n    START_SUBMIT_QUIZ: 'START_SUBMIT_QUIZ',\n    FAIL_SUBMIT_QUIZ: 'FAIL_SUBMIT_QUIZ',\n    SHOW_REPORT: 'SHOW_REPORT',\n    RESET: 'RESET',\n}\n","import { ACTION, VIEW } from './constants';\n\nconst INIT_STATE = {\n    currentView: VIEW.INIT,\n    quizId: null,\n    quizTitle: null,\n    questions: [],\n    score: null,\n    errorMsg: null,\n};\n\nexport default function quiz (state = INIT_STATE, action) {\n    switch (action.type) {\n        case ACTION.LOAD_QUIZ: {\n            return {\n                ...state,\n                errorMsg: null,\n                currentView: VIEW.LOADING,\n                quizId: action.data.quizId,\n            };\n        }\n        case ACTION.START_QUIZ: {\n            return {\n                ...state,\n                currentView: VIEW.STARTED,\n                quizTitle: action.data.title,\n                questions: action.data.questions,\n            }\n        }\n        case ACTION.START_QUIZ_FAIL: {\n            return {\n                ...state,\n                currentView: VIEW.INIT,\n                errorMsg: action.data.errorMsg,\n            }\n        }\n        case ACTION.SELECT_ANSWER: {\n            const { qIndex, aIndex } = action.data;\n            return {\n                ...state,\n                questions: state.questions.map((q, i) => i !== qIndex ? q : {...q, answer: aIndex})\n            };\n        }\n        case ACTION.START_SUBMIT_QUIZ: {\n            return {\n                ...state,\n                errorMsg: null,\n                currentView: VIEW.SUBMITTING\n            }\n        }\n        case ACTION.FAIL_SUBMIT_QUIZ: {\n            return {\n                ...state,\n                currentView: VIEW.STARTED,\n                errorMsg: action.data.errorMsg,\n            }\n        }\n        case ACTION.SHOW_REPORT: {\n            return {\n                ...state,\n                errorMsg: null,\n                currentView: VIEW.ENDED,\n                score: action.data.score,\n            }\n        }\n        case ACTION.RESET: {\n            return INIT_STATE;\n        }\n        default: {\n            console.warn('[reducer] Unhandled action ' + action.type);\n            return state\n        }\n    }\n}\n","import React from 'react';\n\nexport default function Question({ index, question, selectAnswer }) {\n    const name = \"q\" + index;\n    const ansId = j => name + \"a\" + j;\n\n    return (<div className=\"question-cont\">\n        <div className=\"question\">{question.text}</div>\n        <div className=\"options\">\n            {question.options.map((o, j) =>\n            <div className=\"option\" key={j}>\n                <input id={ansId(j)}\n                    type=\"radio\"\n                    name={name}\n                    checked={j === question.answer}\n                    onChange={() => selectAnswer(index, j)}\n                />\n                <label htmlFor={ansId(j)}>{o}</label>\n            </div>)}\n        </div>\n    </div>);\n}","import React from 'react';\nimport Animation from '../loading.svg';\n\nconst SPINNER = <img className=\"spinner\" src={Animation} alt=\"Loading...\"></img>\n\nexport default function LoadingButton(props) {\n    const buttonProps = { ...props, loading: undefined };\n    return (\n        <button {...buttonProps}>\n            {props.loading ? SPINNER : props.children}\n        </button>\n    );\n}","import axios from 'axios';\n\nconst ENDPOINT = require('./config').backendEndpoint;\n\nexport async function fetchQuiz(quizId) {\n    try {\n        const res = await axios.get(ENDPOINT + 'quiz/' + quizId);\n        return {\n            data: res.data\n        };\n    } catch (e) {\n        const error = e.response ? e.response.status : 500;\n        return { error };\n    }\n}\n\nexport async function verifyQuiz(quizId, answers) {\n    try {\n        const res = await axios.post(ENDPOINT + 'quiz/' + quizId + '/verify', answers);\n        return {\n            data: res.data\n        };\n    } catch (e) {\n        const error = e.response ? e.response.status : 500;\n        return { error };\n    }\n}","import { ACTION } from './constants';\nimport { fetchQuiz, verifyQuiz } from '../api';\n\nconst errorMsgFor = code => {\n    switch (code) {\n        case 404: return 'No quiz with that ID';\n        case 429: return 'Too many requests. Backend is rate limited to mitigate DoS. Please try again later.';\n        default: return 'Oops! Something went wrong';\n    }\n}\n\nexport function loadQuiz (quizId) {\n    return async function (dispatch) {\n        dispatch({\n            type: ACTION.LOAD_QUIZ,\n            data: {\n                quizId: quizId\n            }\n        });\n\n        const response = await fetchQuiz(quizId);\n        if (response.error) {\n            const errorMsg = errorMsgFor(response.error);\n            dispatch({\n                type: ACTION.START_QUIZ_FAIL,\n                data: { errorMsg }\n            });\n            return;\n        }\n\n        const quiz = response.data;\n        dispatch({\n            type: ACTION.START_QUIZ,\n            data: {\n                title: quiz.title,\n                questions: quiz.questions\n            }\n        });\n    };\n}\n\nexport function selectAnswer(qIndex, aIndex) {\n    return {\n        type: ACTION.SELECT_ANSWER,\n        data: {\n            qIndex,\n            aIndex,\n        }\n    };\n}\n\nexport function submitQuiz() {\n    return async function (dispatch, getState) {\n        dispatch({\n            type: ACTION.START_SUBMIT_QUIZ\n        });\n\n        const state = getState();\n        const response = await verifyQuiz(state.quizId, state.questions.map(q => q.answer));\n        if (response.error) {\n            const errorMsg = errorMsgFor(response.error);\n            dispatch({\n                type: ACTION.FAIL_SUBMIT_QUIZ,\n                data: { errorMsg }\n            });\n            return;\n        }\n\n        const report = response.data;\n        dispatch({\n            type: ACTION.SHOW_REPORT,\n            data: {\n                score: report.score,\n            }\n        });\n    };\n}\n\nexport function reset() {\n    return {\n        type: ACTION.RESET,\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport QuizQuestion from './QuizQuestion';\nimport LoadingButton from './LoadingButton';\nimport { selectAnswer, submitQuiz } from '../redux/quizActions';\nimport { VIEW } from '../redux/constants';\n\nfunction QuestionList({ currentView, title, questions, errorMsg, selectAnswer, submitQuiz }) {\n    const isLoading = currentView === VIEW.SUBMITTING;\n\n    return (\n        <div className=\"container\">\n            <h2>{title}</h2>\n            <div className=\"question-list\">\n                {questions.map((q, i) => <QuizQuestion key={i} index={i} question={q} selectAnswer={selectAnswer} />)}\n            </div>\n            <div className=\"flx flx-right\">\n                <div className=\"error\">{errorMsg}</div>\n                <LoadingButton\n                    onClick={() => submitQuiz()}\n                    disabled={isLoading}\n                    loading={isLoading}>Submit</LoadingButton>\n            </div>\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        currentView: state.currentView,\n        title: state.quizTitle,\n        errorMsg: state.errorMsg,\n        questions: state.questions,\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { selectAnswer, submitQuiz }\n)(QuestionList);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { reset } from '../redux/quizActions';\n\nfunction QuizReport({ title, score, reset }) {\n    return (<div className=\"container\">\n        <h2>{title} - Report</h2>\n        <h3>You scored {score} {score === 1 ? \"point\" : \"points\"}!</h3>\n        <div className=\"flx flx-right\">\n            <button onClick={reset}>Take Another</button>\n        </div>\n    </div>);\n}\n\nfunction mapStateToProps(state) {\n    return {\n        title: state.quizTitle,\n        score: state.score,\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { reset }\n)(QuizReport);","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport QuestionList from './QuestionList';\nimport QuizReport from './QuizReport';\nimport LoadingButton from './LoadingButton';\nimport { loadQuiz } from '../redux/quizActions';\nimport { VIEW } from '../redux/constants';\n\nfunction QuizBox({ currentView, errorMsg, loadQuiz }) {\n    const [ quizId, setQuizId ] = useState(\"\");\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        if (quizId === \"\") {\n            return;\n        }\n\n        loadQuiz(quizId);\n    }\n\n    const isLoading = currentView === VIEW.LOADING;\n\n    return (\n        <>\n        {(currentView === VIEW.INIT || currentView === VIEW.LOADING)  &&\n        <form onSubmit={handleSubmit}>\n            <div className=\"container\">\n                <div className=\"flx flx-left\">\n                    <input id=\"quiz-id\" type=\"text\" placeholder=\"Enter Quiz ID\"\n                        autoComplete=\"off\"\n                        disabled={isLoading}\n                        value={quizId}\n                        onChange={e => setQuizId(e.target.value)} />\n                    <LoadingButton disabled={isLoading} loading={isLoading}>Start</LoadingButton>\n                </div>\n                <div className=\"error flx flx-right\">{errorMsg}</div>\n            </div>\n        </form>}\n        {(currentView === VIEW.STARTED || currentView === VIEW.SUBMITTING) && <QuestionList />}\n        {(currentView === VIEW.ENDED) && <QuizReport />}\n        </>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        currentView: state.currentView,\n        errorMsg: state.errorMsg,\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { loadQuiz }\n)(QuizBox);","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport quizReducer from './redux/quizReducer';\nimport QuizBox from './components/QuizBox';\nimport './App.css';\n\nconst store = createStore(quizReducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <div className=\"header\">\n            <h1>Quiz App</h1>\n            <p>A tiny quiz app built with React</p>\n        </div>\n        <QuizBox />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}